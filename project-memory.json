{
  "project_goals": [
    "Browser-based retro 16-bit game",
    "Agent-generated puzzles, levels, and music",
    "Fully testable (Vitest + Playwright)"
  ],
  "current_phase": "POC",
  "coding_rules": {
    "architecture": "modular",
    "tests": "required for all core modules",
    "audio": "Tone.js only for POC/MVP",
    "graphics": "ASCII maps -> tile sprites",
    "typescript": "use custom type definitions for external libraries when needed, avoid trivially inferred type annotations",
    "eslint": "follow project ESLint rules, prefix unused parameters with underscore"
  },
  "agent_roles": {
    "alpha": "feature dev & unit tests",
    "beta": "QA, lint, docs, E2E tests"
  },
  "workflow": {
    "pr_creation": "agents can create full PRs with GitHub CLI",
    "branching": "feature branches should follow feature/alpha/* or feature/beta/* pattern and always branch from develop, never from main",
    "ci_checks": "wait 30 seconds after making/updating PRs to check for CI status and comments, and continue checking until all checks are finished",
    "pr_review": "when working with another agent to review, approve, and merge PRs, sleep the terminal for 30 seconds between checks to see any comments or reviews from the other agent",
    "release_process": "never push directly to main; only release to main when develop is fully tested and ready for release",
    "branch_protection": "never push directly to develop branch; always use feature branches and PRs for all changes",
    "merge_order": "merge PRs in the correct order to avoid conflicts (e.g., PRs that create files before PRs that modify them)",
    "conflict_resolution": "when conflicts occur: stash changes, pull latest from develop, resolve conflicts, apply stashed changes, then push"
  },
  "must": [
    "compile with no TS errors",
    "run all unit + E2E tests",
    "run lint & format checks",
    "update docs with any public API changes",
    "always branch from develop, never from main",
    "create custom type definitions for external libraries when needed",
    "prefix unused variables and parameters with underscore",
    "avoid trivially inferred type annotations"
  ],
  "donot": [
    "over-engineer UI systems",
    "add >2 puzzle types before MVP",
    "depend on external visual editors",
    "merge without green CI",
    "push directly to main",
    "push directly to develop branch",
    "create feature branches from main",
    "use direct type references to external libraries without custom type definitions",
    "leave unused variables or parameters without underscore prefix",
    "use trivially inferred type annotations"
  ]
}